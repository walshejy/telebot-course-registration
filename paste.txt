Telegram bot Google Colab python-telegram-bot v20 async. - start - Inline - - - - SQLite Colab 1 !pip -q install python-telegram-bot20.7 2 BOTTOKEN ADMINCHATID os.environ 3 asyncio.runmain import asyncio import logging import os import sqlite3 from typing import Optional from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, from telegram.constants import ParseMode from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters, TITLE -- coding utf-8 --

BOTTOKEN 8145775322AAFq-AnDlhcaoVCDPpYqCXL-0FwZc7s40lA TITLE ...
ADMINCHATID 593866129 TITLE chatid ...
PRICETEXT 5000 PAYMENTMETHODTEXT 3166199327 TITLE ...
COURSES start , anatomy1 Anatomy 1, embryology1 Embryology 1, physiology1 Physiology 1, histology1 Histology 1, biochemistry1 Biochemistry 1, TITLE ...

def dbconnect:
    conn = sqlite3.connect(DBPATH)
    conn.execute("PRAGMA journal_mode=WAL")
    return conn

def dbinit:
    conn = dbconnect()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS userstate (
            userid INTEGER PRIMARY KEY,
            lastcourse TEXT
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS linkmap (
            adminmsgid INTEGER PRIMARY KEY,
            userid INTEGER
        )
    """)
    conn.commit()
    conn.close()

def main():
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    dbinit()
    
    if not BOTTOKEN or BOTTOKEN == "PUT-YOUR-BOT-TOKEN-HERE":
        raise RuntimeError("BOTTOKEN not set")
    
    app = ApplicationBuilder().token(BOTTOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(oncallback))
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handlereceipt))
    app.add_handler(MessageHandler(filters.ALL & filters.Chat(ADMINCHATID), adminreplyrouter))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallbacktext))
    
    print("Bot is running...")
    await app.run_polling(allowed_updates=Update.ALL_TYPES, stop_signals=None)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped.")
